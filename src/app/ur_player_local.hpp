/**
 * @ingroup UrGameControlLayer
 * @file ur_player_local.hpp
 * @author Zoheb Shujauddin (zoheb2424@gmail.com)
 * @brief Contains the class definition for PlayerLocal, representing a player using this application's UI and input to generate game events.
 * @version 0.3.2
 * @date 2025-09-13
 * 
 * 
 */

#ifndef ZOAPPPLAYERLOCAL_H
#define ZOAPPPLAYERLOCAL_H

#include "toymaker/sim_system.hpp"

#include "ur_controller.hpp"

/**
 * @ingroup UrGameControlLayer
 * @brief Definition of the aspect class representing a player playing the Game of Ur locally.
 * 
 * This player uses this application's UI and input system to interact with the game data model.
 * 
 */
class PlayerLocal: public ToyMaker::SimObjectAspect<PlayerLocal> {
public:
    PlayerLocal(): SimObjectAspect<PlayerLocal>{0} {}
    inline static std::string getSimObjectAspectTypeName() { return "UrPlayerLocal"; }
    static std::shared_ptr<BaseSimObjectAspect> create(const nlohmann::json& jsonAspectProperties);
    std::shared_ptr<BaseSimObjectAspect> clone() const override;

private:
    /**
     * @brief The path to the UrController in this scene, from which this aspect will receive its game controls.
     * 
     */
    std::string mControllerPath {};

    /**
     * @brief The controls returned by UrController, used to interact with the game data model.
     * 
     */
    std::unique_ptr<UrPlayerControls> mControls {};

    /**
     * @brief Prompts UrController to create and hand over controls that this player can then use to interact with (the data model of) the game.
     * 
     */
    void onActivated() override;

    /**
     * @brief Attempts to launch a game piece to some location.
     * 
     * @param pieceType The type of piece being launched.
     * @param location The location to which the piece should be launched.
     */
    void onLaunchPieceAttempted(PieceTypeID pieceType, glm::u8vec2 location);

    /**
     * @brief Attempts to advance the game by a turn, ending the current turn.
     * 
     */
    void onNextTurnAttempted();

    /**
     * @brief Attempts to roll the dice.
     * 
     */
    void onDiceRollAttempted();

    /**
     * @brief Attempts to move a piece situated somewhere on the board to a new location based on the current dice state.
     * 
     * @param piece The piece to be moved.
     */
    void onMoveBoardPieceAttempted(PieceIdentity piece);

    /**
     * @brief Callback issued by UrController when this player is required to take action.
     * 
     * @param phaseData The current phase of the game.
     */
    void onMovePrompted(GamePhaseData phaseData);

public:
    /**
     * @brief Observer of prompt move events generated by the game's UrController.
     * 
     */
    ToyMaker::SignalObserver<GamePhaseData> mObserveMovePrompted {
        *this, "MovePromptedObserved",
        [this](GamePhaseData phaseData) {this->onMovePrompted(phaseData);}
    };

    /**
     * @brief Observer of the launch piece event generated by the game's UI layer.
     * 
     */
    ToyMaker::SignalObserver<PieceTypeID, glm::u8vec2> mObservePieceLaunchAttempted {
        *this, "LaunchPieceAttemptedObserved",
        [this](PieceTypeID pieceType, glm::u8vec2 location) { this->onLaunchPieceAttempted(pieceType, location); }
    };

    /**
     * @brief Observer of the move piece event, generated by the game's 3D scene layer.
     * 
     */
    ToyMaker::SignalObserver<PieceIdentity> mObserveMovePieceAttempted {
        *this, "MovePieceAttemptedObserved",
        [this](PieceIdentity piece) { this->onMoveBoardPieceAttempted(piece); }
    };

    /**
     * @brief Observer of the end turn event, generated by the game's UI layer.
     * 
     */
    ToyMaker::SignalObserver<> mObserveEndTurnAttempted {
        *this, "NextTurnAttemptedObserved",
        [this]() { this->onNextTurnAttempted(); }
    };

    /**
     * @brief Observerr of the dice roll event, generated by the game's UI layer.
     * 
     */
    ToyMaker::SignalObserver<> mObserveDiceRollAttempted {
        *this, "DiceRollAttemptedObserved",
        [this]() { this->onDiceRollAttempted(); }
    };

    /**
     * @brief Signal emitted when this player has been prompted for an action, and should take control of the UI and 3D scene of the game.
     * 
     */
    ToyMaker::Signal<PlayerID> mSigControlInterface {*this, "ControlInterface"};
};

#endif
